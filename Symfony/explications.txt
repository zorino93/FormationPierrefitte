

htdocs/formation_pierrefitte/symfony/explications.txt

					-----------------
					---- SYMFONY ----
					-----------------

ETAPE 0 : MVC (Model Vue Controller)
INTRO : Qu'est-ce Symfony
ETAPE 1 : Installation du framework Symfony 3.4
ETAPE 2 : Les bundles
ETAPE 3 : Les routes et controllers
ETAPE 4 : Notre boutique
ETAPE 5 : TWIG
ETAPE 6 : ASSETS
ETAPE 7 : Les entités (Mapping) 
ETAPE 8 : DOCTRINE (DBAL - DQL)
ETAPE 9 : Les formulaires 
ETAPE 10 : Validation des données
ETAPE 11 : Association mapping
ETAPE 12 : Sécurité et Utilisateur
ETAPE 13 : Symfony 4
BONUS 1 : Mise en prod
BONUS 2 : Formulaire de contact 

----------------------------------

INTRO : Qu'est-ce Symfony

	1/ Avantages à utiliser un framework du marché
		A/ Organisation optimisée
		B/ Fonctionnalités communes entre tous nos projets
		C/ Services disponibles (Routing, sécurité, BDD, moteur de template, formulaire)
		D/ Communauté
		
	2/ Choix du framework 
		A/ Propre Framework (bonne expérience)
		B/ Les framework fullstack (Symfony, Laravel, zend, cake)
		C/ Les mini-framework (silex, Slim, CodeIgniter, lumen...)
	
	3/ Symfony 
		 -> framework français
		 -> Versions : 
			LTS (Long Time Support)
				v2.8
				v3.4 --> 2.8 plus souple, et avec des fonctionnalités retirées
				
				v4.2 :
					- PHP 7.1
					- Flex
					- Bundleless
		
------------------------------------------------
ETAPE 1 : Installation du framework Symfony 3.4	
------------------------------------------------
Sommaire : 
1/ Installer Composer
2/ Installer SF 3.4
3/ Arborescence des dossiers et fichiers
4/ Lancement de l'application
	
1/ Installer Composer
	- Composer est un outils qui permet de gérer les dépendances. Il permet de télécharger et de mettre à jour tous les outils dont on a besoin.
	
	- Télécharger : 
		https://getcomposer.org/download/
		Composer-Setup.exe 
		
	- Installer : 
		- Suivre les étapes
	
2/ Installer SF 3.4	
	- Dossier : htdocs/formation_pierrefitte/symfony/
	- Maj + Clic-droit : "Ouvrir la fenetre powershell ici"

	<cmd>
	composer create-project symfony/framework-standard-edition Test
		
		
3/ Arborescence des dossiers et fichiers
	- app/ : Configuration de notre application
	- bin/ : Les exécutables
	- src/ : Le dossier dans lequel on va mettre tout notre code (MVC)
	- var/ : Les fichiers écris SF : Log, le cache...
	- tests/ : Tous les tests unitaire
	- web/ : Repertoire web (images, CSS, JS, Fonts)... la clé d'entrée de l'app (index.php --> app.php ou app_dev.php)
	
	composer.json : Contient toutes les dépendances dont a besoin. 
	
	- vendor : Le coeur de Symfony... on toucheras jamais à ce code ! 

4/ Lancement de l'application
	
	Méthode 1 : 
	Prod : localhost/formation_pierfitte/symfony/test/web/app.php
	Dev : localhost/formation_pierfitte/symfony/test/web/app_dev.php


	Méthode 2 : (server interne)
	
	<cmd>
	cd Test
	php bin/console server:run 

	Navigateur : 
	localhost:8000
	
	
Lorsqu'on est en prod, on ne voit pas les erreurs, mais lorsqu'on est en mode DEV on voit les erreurs : 

	localhost:8000/toto/
	localhost/formation_pierfitte/symfony/test/web/app.php/toto
	
---------------------
ETAPE 2 : Les bundles
---------------------
Sommaire : 
1/ Le concept des Bundles
2/ Création de notre premier Bundle
----------------------

1/ Le concept des Bundles

	- Un bundle c'est une brique de notre application (Module)
	
	- User : (Connecter, deconnecter, inscrire etc...)
			 -> UserController (C)
			 -> UserModel (M)
			 -> vues : inscription/Connexion...

	
	===> Avec le temps, on considère plus "propre" de créer un seul Bundle (AppBundle)


2/ Création de notre premier Bundle
	
	<cmd> Test --> MAJ + CLIC-DROIT : ouvrir fenêtre powershell
	php bin/console generate:bundle
	
	--> POLES/TestBundle
	--> POLESTestBundle
	--> src/
	--> annotation
	
	
	==> Notre bundle a été créé mais il faut enregistrer le namespace POLES dans composer.json
	
	--> Mise à jour de composer.json 
	<code>
	"psr-4": {
            "AppBundle\\": "src/AppBundle",
			"POLES\\": "src/POLES"
        },

	--> Mise à jour de l'app
	<cmd>
	composer update
	
	--> On modifie la fonction render dans notre controller : 
	<code>DefaultController.php
	return $this->render('@POLESTest/Default/index.html.twig');
	
	===>  A ce stade la page d'accueil affiche 'hello World', notre Bundle est prêt à fonctionner !  
		
-----------------------------------
ETAPE 3 : Les routes et controllers
-----------------------------------
Sommaire : 
1/ Création de nos routes
2/ L'objet Request
3/ L'objet Response
4/ Redirection
5/ Message
----------------------

1/ Création de nos routes
	("/") -> route simple homepage
    ("/bonjour/") -> route echo (erreur)
    ("/bonjour2/") -> route response
    ("/hello/{prenom}") -> route response + param URL
    ("/hola/{prenom}") -> route render de vue + param URL
    ("/ciao/{prenom}/{age}") -> route render de vue + 2 params URL
    ("/redirect/") -> route avec redirection (RedirectResponse)
    ("/redirect2/") -> route avec redirection (redirectToRoute)
    ("/message") -> route avec redirect et message en session

2/ L'objet Request
	
	<code>
	use Symfony\Component\HttpFoundation\Request;
	
	Correspond à la requête HTTP (Post, get, Session...)... Il nous permettra par exemple de gérer les infos dans un formulaire. 
	
	<ex code>
	$session = $request -> getSession();


3/ L'objet Response
	
	<code>
	use Symfony\Component\HttpFoundation\Response;	
	
	Nous permet de gérer la partie response de la requete HTTP (retourner du texte simple). 

4/ Redirection
	
	<code>
	use Symfony\Component\HttpFoundation\RedirectResponse;

		Permet d'effectuer des redirections (important)
		
		Méthode 1 : via l'objet Redirect Response
		<code>		
		$route = $this -> get('router') ->  generate('accueil');
		return new RedirectResponse($route);

		Méthode 2 : via le controller	
		<code>
		return $this -> redirectToRoute('accueil');
		
		/!\ A ce stade, et à partir de maintenant toutes nos route doivent avoir un name. 


5/ Message

	$session  -> getFlashBag() -> add() permet de stocker des messages en session (exploitables dans les vues)

    Dans les vues, app.(cf message.html.twig) est une variable twig qui permet d'accéder aux infos en session.
    ex : app.session - app.user


---------------------------
ETAPE 4 : Notre boutique
----------------------------
Sommaire : 
1/ Créer un nouveau projet SF
2/ Réorganiser le AppBundle
3/ Création des premieres routes



1/ Créer un nouveau projet SF

	<cmd> htdocs/formationpierrefitte/symfony
	composer create-project symfony/framework-standard-edition Boutique3
	cd Boutique3
	php bin/console server:run 

2/ Réorganiser le AppBundle

	Controleur : 
	DefaultController -> ProduitController
	MembreController
	CommandeController

	Vues : 
	Resources/views
		- Produit (boutique, fiche_produit, boutique/categorie)
		- Membre (inscription, connexion, profil...)
		- Commande (panier, paiement, transport, codepromo)
	

3/ Création des premieres routes

	"/"
	"/produit/{id}/"
	"/categorie/{cat}/"
	"/inscription/"
	"/connexion/"
	"/profil/"


---------------
ETAPE 5 : twig
---------------
Sommaire
1/ Créer un layout
2/ L'héritage TWIG
3/ Modification de nos vues
4/ Documentation TWIG
---------------

Twig est le moteur de template de Symfony. Un moteur de template (tpl, blade, Twig, smarty...) permet d'afficher du PHP dans les vues HTML plus simplement. 

	exemple : 	
		<?= $membre['prenom'] ?>
		{{ membre.prenom }}
		
		
1/ Créer un layout
	Un layout (app/Resources/views/layout.htm.twig), est une structure de page (un template). 
	Le concept de layout nous permet d'avoir plusieurs structures de pages dans notre site (ex : front + Back). 


2/ L'héritage TWIG
	Avec twig, on parle d'héritage. Un layout créé des block dans lesquels on va pouvoir afficher du contenu. 
	Les vues héritent donc d'un layout et complètent les block. 

3/ Modification de nos vues
	<code>
	{% extends 'layout.html.twig' %}
	{% block content %}
		Contenu de la page
	{% endblock %}
	
	/!\ Lorqu'on utilise l'héritage TWIG, nos vues ne peuvent contenir de l'HTML qu'à l'intérieur d'un block
	
4/ Documentation TWIG

	https://twig.symfony.com/doc/2.x/


	
A FAIRE : 
	Effectuer l'affichage (grâce à l'héritage TWIG) de toutes nos routes actuellement créées. 
	
	"/" ---> Produit/index.html.twig
	"/produit/{id}/"  ---> Produit/produit.html.twig
	"/categorie/{cat}/" ----> Produit/index.html.twig
	"/inscription/"   ---> Membre/inscription.html.twig
	"/connexion/"   --->  Membre/connexion.html.twig
	"/profil/" ---> Membre/profil.html.twig
	

	AdminController : 
	Créer le fichier src/Controller/AdminController.php	
	Routes CRUD - Produit : 
		(au clic sur gestion Produit)
		"/admin/produit/", name="produit_list"  
		views/Admin/produit_list.html.twig
	
		"/admin/produit/add/", name="produit_add"  
		views/Admin/produit_form.html.twig
			
		"/admin/produit/update/{id}/", name="produit_update"  
		views/Admin/produit_form.html.twig

		"/admin/produit/delete/{id}/", name="produit_delete"  
		---> redirection 'produit_list' + message de validation

--------------------
ETAPE 6 : Les assets
--------------------
Sommaire :
1/ Modifier Composer.json
2/ Mise à jour de l'app
3/ Modification des vues (assets et paths)
----------------------------------------
- Le composant ASSETS de SF, nous perme tde gérer les ressources (images, css, js, liens...) et de les appeler de manière absolue.

1/ modification du composer.json
  <code>
  "require": {
    "symfony/asset": "^3.4"
  }
  
  <cmd>
  composer require asset

2/ Update de l'app
    <cmd>
    composer update


3/ Modification de nos vues

   - Layout.html.twig :
      href="../../css/styles.css"
      href="{{ asset('/css/styles.css') }}"
     
	 -> La fonction asset() de TWIG, permet d'avoir  le chemin absolue vers le dossier WEB/ qui contient les ressources.


      href="index.php"
      href="{{ path('homepage') }}"
      
	  -> La fonction path() de TWIG permet d'afficher le chemin absolu d'une route. On utilise le nom (name="homepage") de la route configuré en annotation.

  - Vues :
      src="../../web/photo/<?= $pdt['photo'] ?>"
      src="{{ asset('/photo/' ~ pdt.photo ) }}"
     
	 -> La fonction asset() permet de définir des chemins dynamiques


      href="fiche_produit.php?id=<?= $pdt['idProduit'] ?>"
	  href="{{ path('produit', {'id' : pdt.id } ) }}"
      
	  -> La fonction path() permet de définir des url dynamiques, avec :
          - 'produit' : le nom de la route
          - 'id'      : Le nom du param dynamique
          - pdt.id : la valeur du param dynamique


      ===> A ce stade (si tout est bien paramétré) nous devrions pouvoir circuler d'une page à l'autre. 
	  
	  
------------------------------------
ETAPE 7 : Nos entités (Doctrine ORM)
------------------------------------
Sommaire :
0/ Création de la BDD
1/ Doctrine ORM et le concept d'entity
2/ Créer entité Produit
3/ Annotations
4/ Mettre à jour la BDD
5/ Générer une entité en ligne de Commande
6/ Générer la BDD via les entités
7/ Générer Les entités via la BDD
------------------------------------
1/ Doctrine ORM et le concept d'entity

  - D'une certaine manière, les entités correspondent à la partie model de notre MVC. C'est la relation avec la BDD, mais sous forme de PHP et non de SQL. Merci Doctrine !

  - ORM : Object Relation Mapping

  - Normalement nous devrions plus faire de SQL à partir de maintenant.

  - Nous allons créé nos entités sous forme de class PHP (POPO : Plain Old PHP Object), qui vont permettre à Doctrine de manipuler les tables en BDD.

  - Par exemple nous ne ferons plus de requete INSERT, on fera juste un objet produit
    $pdt = new Produit;
    persist($pdt);

  ===> Pour que tout cela soit possible, il faut "expliquer" à doctrine quelle relation il existe entre nos entités et la BDD --> Object Relation Mapping.


2/ Créer entité Membre

  A/ Créer un dossier Entity/ dans notre AppBundle
  B/ Créer un fichier Membre.php
  C/ On créer les propriétés private et les getter/setter
  
  --> On peut juste crééer les propriété et la console génere les setter/getter
  <cmd>
  php bin/console doctrine:generate:entities AppBundle


3/ Annotations

  - Avec Doctrine ORM, on paramètre le mapping via des annotations.
  <code>
  use Doctrine\ORM\Mapping\ as ORM;

  - Voir le fichier Entity/Membre.php, et les annotations qui déclarent le mapping avec la BDD.

  /!\ Attention les annotations de la clé primaire sont plus longues détaillés !

  Liens :

  Basic Mapping : https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/basic-mapping.html
  
  Association Mapping :https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/association-mapping.html


4/ Mettre à jour la BDD
  - Pour tester la mise à jour de la BDD, nous avons choisi de remplacer pseudo par username, et mdp par password dans l'entité Membre. (et getter et setter...)

  <cmd>
  php bin/console doctrine:schema:update --dump-sql

  -> commande permettant de voir si tout est ok, et générant la requête qui va modifier la BDD

  <cmd>
  php bin/console doctrine:schema:update --force

  -> Commande qui exécute la requête et donc modifie la BDD depuis les entités (bien mappées)


5/ Générer une entité en ligne de Commande

  <cmd>
  php bin/console doctrine:generate:entity

  -> Name : AppBundle:Produit
  -> Puis on suit les différentes étapes.


6/ Générer la BDD via les entités

  - <cmd>
  php bin/console doctrine:schema:update --dump-sql
  php bin/console doctrine:schema:update --force


7/ Générer Les entités via la BDD


  -> php bin/console doctrine:mapping:import AppBundle\Entity annotation

  ==> cela génère nos entity, mais sans les getter et setter.

  Pour ajouter Getter et setter, mais aussi créer les repository
  on va :

  

    A/ Dans chaque entity ajouter ceci :
    @ORM\Entity(repositoryClass="BoutiqueBundle\Repository\ProduitRepository")

    B/
    <cmd>
      <cmd>
		php bin/console doctrine:generate:entities AppBundle

    => Met à jours les entités.

    /!\ Cette commande est dépréciée et devra être remplacée par une commande du bundle Maker. Qui nécessite le Bundle FLEX ---> SF 4

-------------------------------------
ETAPE 8 : DOCTRINE
-------------------------------------
Sommaire :
1/ Le service DOCTRINE
2/ Accéder au service Doctrine depuis les controller
3/ Requetes select * from
4/ Requetes select * from ... where id =
5/ Requetes select * from ... where .... = ....
6/ REQUETE INSERT/UPDATE
7/ REQUETE DELETE
8/ Create Query et Query Builder
-----------------------------------

1/ Le service DOCTRINE

Doctrine est un service (composant) très puissant de SF. D'ailleurs il s'utilise également dans d'autres framework. 

Doctrine fait deux choses : 
	- ORM (Object Relation mapping): 
	Il permet de lier les entités de notre BDD (les tables) à des objets. A chaque fois qu'on va manipuler la BDD, en réalité nous manipulerons des objets (table Produit --> objet de la classe Produit)
	
	- Doctrine DBAL (DataBase Abstract Layer) : 
	Le DBAL est une couche au-dessus de PDO. A partir de maintenant, on ne fera plus de SQL... on utilisera du DQL (Doctrine Query Language). 
	
	- En résumé Doctrine nous fournis des fonctions simples pour faire des SELECT, INSERT, UPDATE, DELETE...
	
2/ Accéder au service Doctrine depuis les controller

- On doit use la (les) entités
    <code>
    use AppBundle\Entity\Produit

    - On fait appel à un repository pour manipuler une entité
    <code>
    $repository = $this -> getRepository(Produit::class);

    $em = $this -> getDoctrine() -> getManager();



3/ Requetes select * from

	<code>
	$repository = $this -> getDoctrine() -> getRepository(Produit::class);
	$produits = $repository -> findAll();
	
	
	
4/ Requetes select * from ... where id =

	<code>
	$repository = $this -> getDoctrine() -> getRepository(Produit::class);
	$produit = $repository -> find($id);

	$em = $this -> getDoctrine() -> getManager();
	$produit = $em -> find(Produit::class, $id);
	
	
5/ Requetes select * from ... where .... = ....
	
	<code>
	$produits = $repository -> findBy(['categorie' => $cat]);
	$produits = $repository -> findBy(array('categorie' => $cat));

	$produits = $repository -> findOneBy(['titre' => 'super tshirt']);


	// Tous les produits de catégories tshirt, de couleur rouge, dans l'ordre du prix decroissant, en affichant les 10 premiers résultats :
	$produits = $repository -> findBy(['categorie' => 'tshirt', 'couleur' => 'rouge'], ['prix' => 'DESC'], 10, 0);
	
	SELECT * FROM produit WHERE categorie = 'tshirt' AND couleur = 'rouge' ORDER BY prix DESC LIMIT 0, 10

	
	==> FindBy embarque beaucoup d'options, il faut avoir la doc ouverte pour paramétrer finement une requête.


6/ REQUETE INSERT/UPDATE
	 - Pour insérer un enregistrement en BDD, on instancie un objet de la classe (Entity), on affecte les valeurs (normalement issues d'un formulaire)
       <code>
       $produit = new Produit;
       $produit 
			-> setReference('XXX') 
			-> setTitre('xxx')
			etc...

       - Et ensuite, on persist l'objet, ce qui signifie que doctrine l'a pris en compte pour l'enregistrer en BDD
       <code>
       $em -> persist($produit);

       - Enfin pour l'enregistrer on flush()
       <code>
       $em -> flush();

		- Pour update un enregistrement, la logique est la même que pour INSERER sauf qu'au lieu d'avoir un objet vide, et rempli par le formulaire, on va récupérer l'objet à modifier, et le formulaire va apporter des modif. Puis on persist() on flush().

       --> CF la route de AdminController : /admin/produit/update

7/ REQUETE DELETE
	- Pour supprimer un enregistrement, on récupère l'objet correspondant, et on exécute sur cet objet la fonction remove() de Doctrine, puis flush()

      <code>
      $produit = $em -> find(Produit::class, $id);
      $em -> remove($produit);
      $em -> flush();

      --> CF la route de AdminController : /admin/produit/delete


8/ Create Query et Query Builder
	- Doctrine nous permet de manipuler des enregistrements via des objets (Entity), simplement grâce à des fonctions (find, findall, findBy, findOneBy, persist, remove, flush)

	- Mais on pourrait avoir besoin de requêtes plus "spécifiques". Doctrine nous fournit deux outils pour cela :


	CreateQuery() : Permet d'exécuter du SQL (DQL).
	-> cf ProduitRepository

	QueryBuilder : Permet d'écrire des requêtes sous forme de fonction PHP (Doctrine)
	-> cf ProduitRepository


		==> Idéalement, ces requêtes spécifiques ne sont pas codées dans les controleurs, mais dans les repository. Pour les deux raisons suivantes :
		1/ Pour les utiliser plus simplements par la suite à divers endroits.
		2/ Pour factoriser le code, le rendre plus simple plus lisible.

		<code dans le repository>
		$em = $this -> getEntityManager();
		au lieu de 
		
		<code dans le controller>
		$em = $this -> getDoctrine() -> getManager();


		Liens :
		Doctrine :
		https://www.doctrine-project.org

		QueryBuilder : https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/query-builder.html

		CreateQuery :
		https://hotexamples.com/examples/doctrine.common.persistence/ObjectManager/createQuery/php-objectmanager-createquery-method-examples.html


-------------------------
ETAPE 9 : Les formulaires
--------------------------
Sommaire :
1/ Le fonctionnement des formulaires
2/ Générer les formulaires (Class type)
3/ Récupérer les données du formulaire
4/ Personnaliser un formulaire avec bootstrap
5/ Update d'un enregistrement
6/ Validation des données
7/ Champs file
--------------
1/ Le fonctionnement des formulaires

	De la même manière qu'on ne manipule aps des enregistrement en BDD, mais bien des objets (Entity), chaque formulaires va être lié à une entité. 
		
	Ainsi, un formulaire sera toujours lié à un objet... 

	inscription --> Entity Membre
	ajout de produit --> Entity Produit
	modif de produit --> Entity Produit
	
	Un formulaire va correspondre à une class MembreType, ProduitType... 
	
	Chaque champs du formulaire va correspondre à une classe... TextareaType (génère un champs textarea, mais egalement toutes les phases de vérif/controle de ce champs...)

2/ Générer les formulaires (Class type)

	<cmd>
	php bin/console generate:doctrine:form AppBundle:Produit

3/ Récupérer les données du formulaire

    - Générer le form :
    $produit = new $Produit;
    $form = $this -> createForm(ShoesType::class, $produit);

    - Générer la vue d'un formulaire :
    $form -> createView();

    - Pour récupérer les données d'un formulaire, il faut dans un premier lier directement l'objet et le formulaire (hydatation)

    <code>
    $form -> handleRequest($request)

    /!\ On oublie pas de use Request en haut de page, et de récupérer l'objet request dans les arguments de la fonction.


    - On check si le formulaire est soumis et est valide
    <code>
    if($form -> isSubmitted() && $form -> isValid())

    - On enregistre les infos en BDD
    <code>
    $em = $this -> getDoctrine() -> getManager();
    $em -> persist($shoes);
    $em -> flush();


4/ Personnaliser le formulaire avec bootstrap

  - cf Admin/Produit/add/ Admin/produit_form.html.twig

  - Par défaut on peut mettre en forme tous les formulaires via bootstrap, en modifiant le fichier app/config/config.yml
  <code>
  twig:
      form_themes:
        - 'bootstrap_4_layout.html.twig'

		

5/ Update un Enregistrement

    - Pour update un enregistrement c'est comme créer un enregistrement sauf que le formulaire est lié à un objet existant et non à un objet vide.	
	
	
6/ Validation des données
	
	
    -> Voir les Constraints dans notre ProduitType.
	
7/ Champs file

	- La gestion des photos s'effectue en deux étapes: 
		
		1/Renommer la photo et enregistrer son nom dans la BDD 
		
		
		2/ Récupérer la photo physique (la data, les octets qui constituent la photo) et la stcoker sur le serveur. 


	- Dans notre entité Produit, on ajoute une propriété $file (qui stockera l'image en soit). 
	
	- On créé les getter/setter de $file.

	- On créé la fonction updloadPhoto() qui va tout gérer  : Renommer, stocker en BDD (via $photo) et déplacer le fichier dans son emplacement définitif. 
	
	- Notre formulaire produit (ProduitType.php) ne met plus dans le formulaire un champs photo (TEXT) mais un champs File, pour l'upload d'une photo. 
	
	- Dans nos routes (add et update de produit) on ajoute la fonction uploadPhoto() avant le flush. 
	
	- Dans la route delete produit on ajoute la fonction removePhoto() pour supprimer la photo en même temps que le produit. 
	

===> Pour aller plus loin avec les formulaires symfony : Lien : https://symfony.com/doc/current/reference/forms/types.html
	
	
----------------------------
ETAPE 11 : Association mapping
Sommaire : 
1/ Le concept
2/ La Documentation de Doctrine
3/ mise en place de l'association Mapping (OneToMany) pour Membre -> Commande
-----------------------------

1/ Avec Doctrine, on a pris l'habitude de travailler avec des objets (Entity) correspondant aux enregistrement dans la BDD (Mapping).

L'association Mapping nous permet de travailler avec des objets dans des objets. Exemple : Un membre peut avoir plusieurs commandes, dans ce cas, dans un objet Membre nous avons un array composé d'objet commande. Une commande appartient à UN membre, dans ce cas dans un objet Commande nous avons un objet membre. 

Grâce à ce fonctionnement il est plus nécessaire de faire des requêtes de jointure, lorsqu'on récupère un objet, on récupère tous les objets liés. 



2/ 
https://www.doctrine-project.org/projects/doctrine-orm/en/2.6/reference/association-mapping.html#association-mapping


3/ mise en place de l'association Mapping (OneToMany) pour Membre -> Commande
	
		-> Entity Membre
		-> Entity Commande
		-> /!\ Formulaire CommandeType le champs idMembre devient un champs Membre (EntityType::class) qui liste tous les membres existant. 
		-> Dans la vue commande_list.html.twig, on utilise {{ cde.membre.prenom }}



A FAIRE : 

Formulaire d'inscription : 

-> membreController : 
		
		@Route("/inscription/", name="inscription")
		public function inscriptionAction(){
		
			1/ Créer un objet membre vide. 
			
			2/ recuprer le formulaire membreType
			
			3/ Lier l'objet membre avec le formulaire
			3.2/ Verifier la validité des infos
			3.3/ Inscription (persist() + flush()
			3.4/ redirect vers connexion
			
			
			
			4/ Créer params avec la vue du formulaire
			
			5/ Retourner une vue (render)
		}		
		

-----------------------------------
ETAPE 12 : Sécurité et Utilisateur
Sommaire : 
1/ Niveau de sécurité
2/ Fichier de sécurité
3/ Création des routes
4/ Classe Membre (extends UserInterface)
5/ Layout
----------------------------------
1/ Niveau de sécurité

SF va fonctionner avec un parefeu qui va autoriser ou non l'accès en fonction du statut. 

Par défaut tout utilisateur est considérer comme anonyme. Ensuite on peut créer plusieurs role : 
	- ROLE_USER : user identifié
	- ROLE_ADMIN : Admin du site
	- ROLE_SUPER_ADMIN : Acces particulier à certaines données
	
	
Le systeme de parefeu, fait en sorte de tester l'acces à une ressource 
	-> Si user anonyme qui tente d'aller homepage : OK
	-> Si user connecté tente d'aller sur profil : OK
	-> Si user anonyme tente d'aller sur profil : PAS OK --> Connexion --> profil
	-> Si user connecté tente d'aller sur admin/ : PAS OK --> Page d'erreur
	

2/ Fichier de sécurité

	- app/config/security.yml

	On définie plusieurs choses : 
		- encoders (la manière dont les password seront encodés)
		- provider (quelle ressource va servir d'utilisateur : MembreEntity, le login: username)
		- Hierarchie : La pyramide des droits
		- les routes form_login et logout (voir le point suivant)
		- Acces control : qui a le droit à quoi


	/!\ Attention le YAML est très sensible aux indentations et aux espaces. 


3/ Création des routes	

	form_login: 
		login_path: connexion (page de connexion)
		
		check_path: connexion_check (Page de checking de login/password, on doit juste la créée, et la mettre dans l'attribut action de notre formulaire de connexion)
		
		default_target_path: homepage (La page par défaut sur laquelle on est dirigé une fois connecté. Sinon le parefeu prend le dessus)

	logout:
		path: deconnexion (La route de deconnexion. Doit exister mais est vide)
		target: homepage (page de destination, lorsqu'on se déconnecte). 
		
4/ Classe Membre (implements UserInterface)
	
		- A partir de maintenant la classe Membre doit implements l'interface UserInterface
		
		
		--> username (getter/setter)
		--> password (getter/setter)
		--> roles (getter/setter) /!\ roles est un array 
		--> salt (getter/setter)
		
		/!\ Attention lors de l'inscription, il faut penser à définir un role_user par défaut. 
		
		--> public function eraseCredentials() : fonction obligatoire pour que SF prenne la main. 
		
		--> serialiazable : Lier à la manière dont le password est crypté. 
		
		--> getRoles() et setRoles() au pluriel obligatoirement. 
		
5/ Layout : 
	Dans les vues on fait la distinction entre le niveau d'acces des utilisateur avec : 
		
	{{ if is_granted('IS_AUTHENTICATED_FULLY') }}  : tout le monde (sauf anonyme)
	{{ if is_granted('ROLE_USER') }}  : tous les users
	{{ if is_granted('ROLE_ADMIN') }}  : tous les admin
	
		
		
===> Le salage (salt) c'est l'idée de rendre un MDP quasiment inviolable en ajoutant au MDP soit une chaîne de caractère que seul le développeur connait (petit site, petite structure), ou alors une chaîne aléatoire pour chaque user... ENsuite pour la connexion, on récupère le salage, pour reconstituer le MDP complet.

		
---------------------		
ETAPE 13 : Symfony 4		
Sommaire :
1/ Installation
2/ L'architecture
3/ Lancement de l'app
4/ Le maker
5/ Flex
-------------------


1/ installation : 
composer create-project symfony/website-skeleton	

2/ L'architecture

	- app a disparu  ----> config 
	- src/AppBundle a disparu   ---->  BundleLess sans Bundle mais toujours dans le namespace App\
	- src/Resources/ View  a disparu  ---> templates
		
	Le dossier templates prendra toutes les vues (Produit/ Admin/ Membres/ Bases) ainsi que le layout.html.twig
	
	web/ a disparu (app_dev.php, app.php, JS/CSS/Photo) ----> public (index.php, JS/CSS/Photo etc...)
	
	.env : Notre config (notamment les infos de connexion à la bdd
	
3/ Lancement de l'app

	<cmd>
	php bin/console server:start
		ou alors
	php bin/console server:run
		
		
4/ Le maker : 		

	- Création des Entités : 
		php bin/console make:entity
		
		ou depuis la BDD : 
		php bin/console doctrine:mapping:import "App\Entity" annotation --path=src/Entity

			
	- Mise à jours des entités :
		php bin/console make:Entity --regenerate
		

	- Créer les controller : 
		php bin/console make:controller 
		ProduitController 
		MembreController 
		CommandeController
		BaseController
		AdminController

	- Créer les CRUD : 
		- pre-requis : Copier/coller les entités
		
		copier le dossier	 boutique3/src/AppBundle/Entity
		le coller dans le dossier	boutique4/src/
	
	
		<cmd>
		php bin/console make:crud
		Membre
		Commande
		Produit
		
		
	- Créer l'entité Membre : 
		<cmd>
	php bin/console make:user
	
	
		
Bundle : 

	- FOSUserBundle 
	- easyAdmin 
	
Flex : 

Symfony Flex : la nouvelle façon de développer avec Symfony
Les versions de Symfony 3.4 et 4.0 viennent tout juste de sortir et avec elles vient une nouvelle façon de développer des applications Symfony. Dîtes adieu à la Standard Edition et bonjour aux tout nouveaux symfony/skeleton, Symfony Flex et les recettes qui vont avec.

Vous avez dit Flex ?
D’un point de vue technique, Symfony Flex est juste un plugin Composer. Il se branche sur les événements Composer dès lors que vous lancez une commande qui installe, met à jour ou supprime un paquet PHP ou bundle Symfony. Son but ? Automatiser l’installation et la suppression de vos dépendances en fournissant une configuration par défaut sans avoir à aller lire la doc pour trouver quelle configuration écrire, quelles routes charger ou autre tâche rébarbative à effectuer. Et dès Symfony 4.0, Flex sera le moyen par défaut pour développer une application Symfony.

Il paraît qu’un bon exemple vaut mieux qu’un long discours. Alors imaginons que vous ayez une application existante en Symfony 3.3 (parce que vous êtes un dev cool et avez effectué les migrations vers les dernières versions de Symfony au fur et à mesure 💪). Vous voulez y ajouter une API en installant api-platform. Vous allez donc effectuer les tâches suivantes :
	
	
Sources : https://afsy.fr/avent/2017/08-symfony-flex-la-nouvelle-facon-de-developper-avec-symfony


WebPack Encore : 
https://symfony.com/doc/current/frontend.html
	
		
		
	